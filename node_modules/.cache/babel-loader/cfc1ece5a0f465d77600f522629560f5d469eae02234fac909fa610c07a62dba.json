{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex\\\\Documents\\\\Python\\\\CSConnect\\\\src\\\\Code_Pages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Message from \"./entities/Message\";\nimport Group from \"./entities/Group\";\n// import User from \"./entities/User\"; // Se existir, ajuste o caminho\nimport { motion, AnimatePresence } from \"framer-motion\";\n// import { cn } from \"./lib/utils\"; // Se existir, ajuste o caminho\nimport { Toaster, toast } from \"sonner\";\nimport MessageList from \"./components/MessageList\";\nimport MessageInput from \"./components/MessageInput\";\nimport ChatHeader from \"./components/ChatHeader\";\nimport LoginPrompt from \"./components/LoginPrompt\";\nimport UsersList from \"./components/UsersList\";\nimport PendingApproval from \"./components/PendingApproval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPage() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [selectedConversation, setSelectedConversation] = useState({\n    type: 'group',\n    id: 'main'\n  });\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [isMobile, setIsMobile] = useState(false);\n  const [mobileView, setMobileView] = useState('list');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n    return () => window.removeEventListener(\"resize\", checkMobile);\n  }, []);\n  useEffect(() => {\n    const initializeChat = async () => {\n      try {\n        let user = await User.me();\n\n        // Auto-promote alex@ceosoftware.com.br to admin\n        if (user.email === 'alex@ceosoftware.com.br' && (user.role !== 'admin' || !user.is_active)) {\n          await User.update(user.id, {\n            role: 'admin',\n            is_active: true\n          });\n          user = await User.me(); // Re-fetch user to get updated data\n        }\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n\n        // Send approval notification if user is pending\n        if (user.role === 'pending' && !user.is_active && !user.approval_notification_sent) {\n          const admins = await User.filter({\n            email: 'alex@ceosoftware.com.br'\n          });\n          if (admins.length > 0) {\n            const admin = admins[0];\n            const conversationId = [admin.id, user.id].sort().join(\"-\");\n            await Message.create({\n              sender_name: \"Sistema\",\n              sender_id: \"system\",\n              recipient_id: admin.id,\n              content: `O usuário ${user.full_name} (${user.email}) está aguardando aprovação. Acesse o Painel de Administrador para analisar.`,\n              conversation_id: conversationId,\n              is_private: true\n            });\n            await User.update(user.id, {\n              approval_notification_sent: true\n            });\n          }\n        }\n      } catch (error) {\n        setIsAuthenticated(false);\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    };\n    initializeChat();\n  }, []);\n\n  // Efeito para atualizar o status \"last_seen\" do usuário\n  useEffect(() => {\n    if (!isAuthenticated || !currentUser) return;\n    const updatePresence = async () => {\n      try {\n        await User.updateMyUserData({\n          last_seen: new Date().toISOString()\n        });\n      } catch (error) {\n        console.error(\"Falha ao atualizar presença:\", error);\n      }\n    };\n    updatePresence(); // Atualiza uma vez ao carregar\n    const presenceInterval = setInterval(updatePresence, 60 * 1000); // Atualiza a cada 60 segundos\n\n    return () => clearInterval(presenceInterval);\n  }, [isAuthenticated, currentUser]);\n  useEffect(() => {\n    if (!isAuthenticated || !currentUser || !currentUser.is_active) return;\n    const loadMessages = async () => {\n      try {\n        let fetchedMessages = [];\n        if (selectedConversation.type === \"group\" && selectedConversation.id === 'main') {\n          const allMessages = await Message.list(\"-created_date\", 100);\n          fetchedMessages = allMessages.filter(msg => !msg.is_private || msg.conversation_id === 'main');\n        } else if (selectedConversation.type === 'custom_group' && selectedConversation.id) {\n          const allMessages = await Message.list(\"-created_date\", 200);\n          fetchedMessages = allMessages.filter(msg => msg.conversation_id === selectedConversation.id);\n        } else if (selectedConversation.type === 'private' && selectedConversation.id) {\n          const conversationId = [currentUser.id, selectedConversation.id].sort().join(\"-\");\n          const allMessages = await Message.list(\"-created_date\", 200);\n          fetchedMessages = allMessages.filter(msg => msg.conversation_id === conversationId && msg.is_private === true);\n        }\n        const sortedMessages = fetchedMessages.sort((a, b) => new Date(a.created_date) - new Date(b.created_date));\n        setMessages(prevMessages => {\n          // --- Lógica de Notificação ---\n          if (sortedMessages.length > 0 && prevMessages.length > 0) {\n            const latestReceivedId = sortedMessages[sortedMessages.length - 1].id;\n            const knownIds = new Set(prevMessages.map(m => m.id));\n            if (!knownIds.has(latestReceivedId)) {\n              const newMessage = sortedMessages[sortedMessages.length - 1];\n              if (newMessage.sender_id !== currentUser.id) {\n                let isChatActive = false;\n                if (document.hasFocus()) {\n                  if (newMessage.is_private && selectedConversation.type === 'private' && newMessage.sender_id === selectedConversation.id) {\n                    isChatActive = true;\n                  } else if (!newMessage.is_private && (selectedConversation.type === 'group' || selectedConversation.type === 'custom_group') && newMessage.conversation_id === selectedConversation.id) {\n                    isChatActive = true;\n                  }\n                }\n                if (!isChatActive) {\n                  toast.message(`Nova mensagem de ${newMessage.sender_name}`, {\n                    description: newMessage.content || `Enviou um anexo.`\n                  });\n                }\n              }\n            }\n          }\n          // --- Fim da Lógica de Notificação ---\n          return sortedMessages;\n        });\n      } catch (error) {\n        console.error(\"Erro ao carregar mensagens:\", error);\n        setMessages([]);\n      }\n    };\n    loadMessages();\n    const interval = setInterval(loadMessages, 3000);\n    return () => clearInterval(interval);\n  }, [selectedConversation, isAuthenticated, currentUser]);\n  const handleLogin = async () => {\n    try {\n      await User.login();\n    } catch (error) {\n      console.error(\"Erro no login:\", error);\n    }\n  };\n  const handleSelectUser = user => {\n    setSelectedUser(user);\n    setSelectedGroup(null);\n    setSelectedConversation({\n      type: 'private',\n      id: user.id\n    });\n    if (isMobile) setMobileView('chat');\n  };\n  const handleSelectGroup = group => {\n    setSelectedUser(null);\n    if (group.id === 'main') {\n      setSelectedGroup({\n        id: 'main',\n        name: 'Chat Principal'\n      });\n      setSelectedConversation({\n        type: 'group',\n        id: 'main'\n      });\n    } else {\n      setSelectedGroup(group);\n      setSelectedConversation({\n        type: 'custom_group',\n        id: group.id\n      });\n    }\n    if (isMobile) setMobileView('chat');\n  };\n  const handleBackToList = () => {\n    if (isMobile) {\n      setMobileView('list');\n      setTimeout(() => {\n        setSelectedConversation({\n          type: 'group',\n          id: 'main'\n        });\n        setSelectedUser(null);\n        setSelectedGroup(null);\n      }, 300);\n    }\n  };\n  const handleSendMessage = async messageData => {\n    if (!isAuthenticated || !currentUser) return;\n    try {\n      let messageToCreate;\n      if (selectedConversation.type === \"private\" && selectedUser) {\n        const conversationId = [currentUser.id, selectedUser.id].sort().join(\"-\");\n        messageToCreate = {\n          ...messageData,\n          sender_name: currentUser.full_name || \"Usuário\",\n          sender_id: currentUser.id,\n          recipient_id: selectedUser.id,\n          conversation_id: conversationId,\n          is_private: true\n        };\n      } else if (selectedConversation.type === \"custom_group\" && selectedGroup) {\n        messageToCreate = {\n          ...messageData,\n          sender_name: currentUser.full_name || \"Usuário\",\n          sender_id: currentUser.id,\n          recipient_id: null,\n          conversation_id: selectedGroup.id,\n          is_private: false\n        };\n      } else {\n        messageToCreate = {\n          ...messageData,\n          sender_name: currentUser.full_name || \"Usuário\",\n          sender_id: currentUser.id,\n          recipient_id: null,\n          conversation_id: \"main\",\n          is_private: false\n        };\n      }\n      await Message.create(messageToCreate);\n    } catch (error) {\n      console.error(\"Erro ao enviar mensagem:\", error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full flex items-center justify-center bg-gradient-to-br from-slate-50 to-blue-50/30\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        animate: {\n          rotate: 360\n        },\n        transition: {\n          duration: 1,\n          repeat: Infinity,\n          ease: \"linear\"\n        },\n        className: \"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(LoginPrompt, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n  if (currentUser && !currentUser.is_active) {\n    return /*#__PURE__*/_jsxDEV(PendingApproval, {\n      user: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full flex bg-gradient-to-br from-slate-50 to-blue-50/30 overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      richColors: true,\n      position: \"top-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cn(\"w-full md:w-80 md:flex-shrink-0 border-r border-slate-200/60 bg-white/80 backdrop-blur-xl transition-transform duration-300 ease-in-out\", isMobile && mobileView === 'chat' ? \"-translate-x-full\" : \"translate-x-0\", \"md:translate-x-0\"),\n      children: /*#__PURE__*/_jsxDEV(UsersList, {\n        currentUser: currentUser,\n        selectedConversation: selectedConversation,\n        onSelectUser: handleSelectUser,\n        onSelectGroup: handleSelectGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cn(\"flex-1 flex flex-col absolute md:static top-0 left-0 w-full h-full transition-transform duration-300 ease-in-out\", isMobile && mobileView === 'list' ? \"translate-x-full\" : \"translate-x-0\", \"md:translate-x-0\"),\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        currentUser: currentUser,\n        selectedUser: selectedUser,\n        selectedGroup: selectedGroup,\n        conversationType: selectedConversation.type,\n        onBack: handleBackToList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-hidden flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 overflow-y-auto px-4 py-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-w-4xl mx-auto\",\n            children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n              children: /*#__PURE__*/_jsxDEV(MessageList, {\n                messages: messages,\n                currentUser: currentUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-t border-slate-200/60 bg-white/80 backdrop-blur-xl\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-w-4xl mx-auto px-4 py-4\",\n            children: /*#__PURE__*/_jsxDEV(MessageInput, {\n              onSendMessage: handleSendMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"Hz/jGHO7OrDGcuOAR3RanJThkKA=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Message","Group","motion","AnimatePresence","Toaster","toast","MessageList","MessageInput","ChatHeader","LoginPrompt","UsersList","PendingApproval","jsxDEV","_jsxDEV","ChatPage","_s","messages","setMessages","currentUser","setCurrentUser","loading","setLoading","isAuthenticated","setIsAuthenticated","selectedConversation","setSelectedConversation","type","id","selectedUser","setSelectedUser","selectedGroup","setSelectedGroup","isMobile","setIsMobile","mobileView","setMobileView","messagesEndRef","checkMobile","window","innerWidth","addEventListener","removeEventListener","initializeChat","user","User","me","email","role","is_active","update","approval_notification_sent","admins","filter","length","admin","conversationId","sort","join","create","sender_name","sender_id","recipient_id","content","full_name","conversation_id","is_private","error","updatePresence","updateMyUserData","last_seen","Date","toISOString","console","presenceInterval","setInterval","clearInterval","loadMessages","fetchedMessages","allMessages","list","msg","sortedMessages","a","b","created_date","prevMessages","latestReceivedId","knownIds","Set","map","m","has","newMessage","isChatActive","document","hasFocus","message","description","interval","handleLogin","login","handleSelectUser","handleSelectGroup","group","name","handleBackToList","setTimeout","handleSendMessage","messageData","messageToCreate","className","children","div","animate","rotate","transition","duration","repeat","Infinity","ease","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","richColors","position","cn","onSelectUser","onSelectGroup","conversationType","onBack","ref","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/alex/Documents/Python/CSConnect/src/Code_Pages.js"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport Message from \"./entities/Message\";\r\nimport Group from \"./entities/Group\";\r\n// import User from \"./entities/User\"; // Se existir, ajuste o caminho\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n// import { cn } from \"./lib/utils\"; // Se existir, ajuste o caminho\r\nimport { Toaster, toast } from \"sonner\";\r\n\r\nimport MessageList from \"./components/MessageList\";\r\nimport MessageInput from \"./components/MessageInput\";\r\nimport ChatHeader from \"./components/ChatHeader\";\r\nimport LoginPrompt from \"./components/LoginPrompt\";\r\nimport UsersList from \"./components/UsersList\";\r\nimport PendingApproval from \"./components/PendingApproval\";\r\n\r\nexport default function ChatPage() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [selectedConversation, setSelectedConversation] = useState({ type: 'group', id: 'main' });\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  \r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [mobileView, setMobileView] = useState('list');\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\r\n    checkMobile();\r\n    window.addEventListener(\"resize\", checkMobile);\r\n    return () => window.removeEventListener(\"resize\", checkMobile);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const initializeChat = async () => {\r\n      try {\r\n        let user = await User.me();\r\n        \r\n        // Auto-promote alex@ceosoftware.com.br to admin\r\n        if (user.email === 'alex@ceosoftware.com.br' && (user.role !== 'admin' || !user.is_active)) {\r\n            await User.update(user.id, { role: 'admin', is_active: true });\r\n            user = await User.me(); // Re-fetch user to get updated data\r\n        }\r\n\r\n        setCurrentUser(user);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Send approval notification if user is pending\r\n        if (user.role === 'pending' && !user.is_active && !user.approval_notification_sent) {\r\n            const admins = await User.filter({ email: 'alex@ceosoftware.com.br' });\r\n            if (admins.length > 0) {\r\n                const admin = admins[0];\r\n                const conversationId = [admin.id, user.id].sort().join(\"-\");\r\n                \r\n                await Message.create({\r\n                    sender_name: \"Sistema\",\r\n                    sender_id: \"system\",\r\n                    recipient_id: admin.id,\r\n                    content: `O usuário ${user.full_name} (${user.email}) está aguardando aprovação. Acesse o Painel de Administrador para analisar.`,\r\n                    conversation_id: conversationId,\r\n                    is_private: true\r\n                });\r\n                \r\n                await User.update(user.id, { approval_notification_sent: true });\r\n            }\r\n        }\r\n\r\n      } catch (error) {\r\n        setIsAuthenticated(false);\r\n        setCurrentUser(null);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    initializeChat();\r\n  }, []);\r\n  \r\n  // Efeito para atualizar o status \"last_seen\" do usuário\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !currentUser) return;\r\n\r\n    const updatePresence = async () => {\r\n      try {\r\n        await User.updateMyUserData({ last_seen: new Date().toISOString() });\r\n      } catch (error) {\r\n        console.error(\"Falha ao atualizar presença:\", error);\r\n      }\r\n    };\r\n\r\n    updatePresence(); // Atualiza uma vez ao carregar\r\n    const presenceInterval = setInterval(updatePresence, 60 * 1000); // Atualiza a cada 60 segundos\r\n\r\n    return () => clearInterval(presenceInterval);\r\n  }, [isAuthenticated, currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !currentUser || !currentUser.is_active) return;\r\n\r\n    const loadMessages = async () => {\r\n      try {\r\n        let fetchedMessages = [];\r\n        \r\n        if (selectedConversation.type === \"group\" && selectedConversation.id === 'main') {\r\n          const allMessages = await Message.list(\"-created_date\", 100);\r\n          fetchedMessages = allMessages.filter(msg => !msg.is_private || msg.conversation_id === 'main');\r\n        } else if (selectedConversation.type === 'custom_group' && selectedConversation.id) {\r\n          const allMessages = await Message.list(\"-created_date\", 200);\r\n          fetchedMessages = allMessages.filter(msg => msg.conversation_id === selectedConversation.id);\r\n        } else if (selectedConversation.type === 'private' && selectedConversation.id) {\r\n          const conversationId = [currentUser.id, selectedConversation.id].sort().join(\"-\");\r\n          const allMessages = await Message.list(\"-created_date\", 200);\r\n          fetchedMessages = allMessages.filter(msg => msg.conversation_id === conversationId && msg.is_private === true);\r\n        }\r\n        \r\n        const sortedMessages = fetchedMessages.sort((a, b) => new Date(a.created_date) - new Date(b.created_date));\r\n\r\n        setMessages(prevMessages => {\r\n          // --- Lógica de Notificação ---\r\n          if (sortedMessages.length > 0 && prevMessages.length > 0) {\r\n            const latestReceivedId = sortedMessages[sortedMessages.length - 1].id;\r\n            const knownIds = new Set(prevMessages.map(m => m.id));\r\n\r\n            if (!knownIds.has(latestReceivedId)) {\r\n              const newMessage = sortedMessages[sortedMessages.length - 1];\r\n              if (newMessage.sender_id !== currentUser.id) {\r\n                let isChatActive = false;\r\n                if (document.hasFocus()) {\r\n                  if (newMessage.is_private && selectedConversation.type === 'private' && newMessage.sender_id === selectedConversation.id) {\r\n                    isChatActive = true;\r\n                  } else if (!newMessage.is_private && (selectedConversation.type === 'group' || selectedConversation.type === 'custom_group') && newMessage.conversation_id === selectedConversation.id) {\r\n                    isChatActive = true;\r\n                  }\r\n                }\r\n                if (!isChatActive) {\r\n                  toast.message(`Nova mensagem de ${newMessage.sender_name}`, {\r\n                    description: newMessage.content || `Enviou um anexo.`,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n          // --- Fim da Lógica de Notificação ---\r\n          return sortedMessages;\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(\"Erro ao carregar mensagens:\", error);\r\n        setMessages([]);\r\n      }\r\n    };\r\n\r\n    loadMessages();\r\n    const interval = setInterval(loadMessages, 3000);\r\n    return () => clearInterval(interval);\r\n  }, [selectedConversation, isAuthenticated, currentUser]);\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      await User.login();\r\n    } catch (error) {\r\n      console.error(\"Erro no login:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelectUser = (user) => {\r\n    setSelectedUser(user);\r\n    setSelectedGroup(null);\r\n    setSelectedConversation({ type: 'private', id: user.id });\r\n    if (isMobile) setMobileView('chat');\r\n  };\r\n\r\n  const handleSelectGroup = (group) => {\r\n    setSelectedUser(null);\r\n    if (group.id === 'main') {\r\n      setSelectedGroup({ id: 'main', name: 'Chat Principal' });\r\n      setSelectedConversation({ type: 'group', id: 'main' });\r\n    } else {\r\n      setSelectedGroup(group);\r\n      setSelectedConversation({ type: 'custom_group', id: group.id });\r\n    }\r\n    if (isMobile) setMobileView('chat');\r\n  };\r\n\r\n  const handleBackToList = () => {\r\n    if (isMobile) {\r\n      setMobileView('list');\r\n      setTimeout(() => {\r\n        setSelectedConversation({ type: 'group', id: 'main' });\r\n        setSelectedUser(null);\r\n        setSelectedGroup(null);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (messageData) => {\r\n    if (!isAuthenticated || !currentUser) return;\r\n    \r\n    try {\r\n      let messageToCreate;\r\n\r\n      if (selectedConversation.type === \"private\" && selectedUser) {\r\n        const conversationId = [currentUser.id, selectedUser.id].sort().join(\"-\");\r\n        messageToCreate = {\r\n          ...messageData,\r\n          sender_name: currentUser.full_name || \"Usuário\",\r\n          sender_id: currentUser.id,\r\n          recipient_id: selectedUser.id,\r\n          conversation_id: conversationId,\r\n          is_private: true\r\n        };\r\n      } else if (selectedConversation.type === \"custom_group\" && selectedGroup) {\r\n        messageToCreate = {\r\n          ...messageData,\r\n          sender_name: currentUser.full_name || \"Usuário\",\r\n          sender_id: currentUser.id,\r\n          recipient_id: null,\r\n          conversation_id: selectedGroup.id,\r\n          is_private: false\r\n        };\r\n      } else {\r\n        messageToCreate = {\r\n          ...messageData,\r\n          sender_name: currentUser.full_name || \"Usuário\",\r\n          sender_id: currentUser.id,\r\n          recipient_id: null,\r\n          conversation_id: \"main\",\r\n          is_private: false\r\n        };\r\n      }\r\n\r\n      await Message.create(messageToCreate);\r\n    } catch (error) {\r\n      console.error(\"Erro ao enviar mensagem:\", error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center bg-gradient-to-br from-slate-50 to-blue-50/30\">\r\n        <motion.div\r\n          animate={{ rotate: 360 }}\r\n          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\r\n          className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return <LoginPrompt onLogin={handleLogin} />;\r\n  }\r\n\r\n  if (currentUser && !currentUser.is_active) {\r\n    return <PendingApproval user={currentUser} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full flex bg-gradient-to-br from-slate-50 to-blue-50/30 overflow-hidden\">\r\n      <Toaster richColors position=\"top-right\" />\r\n      {/* Users Sidebar */}\r\n      <div className={cn(\r\n        \"w-full md:w-80 md:flex-shrink-0 border-r border-slate-200/60 bg-white/80 backdrop-blur-xl transition-transform duration-300 ease-in-out\",\r\n        isMobile && mobileView === 'chat' ? \"-translate-x-full\" : \"translate-x-0\",\r\n        \"md:translate-x-0\"\r\n      )}>\r\n        <UsersList \r\n          currentUser={currentUser}\r\n          selectedConversation={selectedConversation}\r\n          onSelectUser={handleSelectUser}\r\n          onSelectGroup={handleSelectGroup}\r\n        />\r\n      </div>\r\n\r\n      {/* Chat Area */}\r\n      <div className={cn(\r\n        \"flex-1 flex flex-col absolute md:static top-0 left-0 w-full h-full transition-transform duration-300 ease-in-out\",\r\n         isMobile && mobileView === 'list' ? \"translate-x-full\" : \"translate-x-0\",\r\n         \"md:translate-x-0\"\r\n      )}>\r\n        <ChatHeader \r\n          currentUser={currentUser} \r\n          selectedUser={selectedUser}\r\n          selectedGroup={selectedGroup}\r\n          conversationType={selectedConversation.type}\r\n          onBack={handleBackToList}\r\n        />\r\n        \r\n        <div className=\"flex-1 overflow-hidden flex flex-col\">\r\n          <div className=\"flex-1 overflow-y-auto px-4 py-6\">\r\n            <div className=\"max-w-4xl mx-auto\">\r\n              <AnimatePresence>\r\n                <MessageList messages={messages} currentUser={currentUser} />\r\n              </AnimatePresence>\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"border-t border-slate-200/60 bg-white/80 backdrop-blur-xl\">\r\n            <div className=\"max-w-4xl mx-auto px-4 py-4\">\r\n              <MessageInput onSendMessage={handleSendMessage} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}